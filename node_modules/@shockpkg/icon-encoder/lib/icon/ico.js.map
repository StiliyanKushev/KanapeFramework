{"version":3,"sources":["icon/ico.ts"],"names":["IconIco","Icon","constructor","addFromPng","data","png","raw","ihdr","isPng","_sizeRequiresLegacyBitmap","width","height","entries","push","Buffer","concat","length","addFromRgba","_decodePngToRgba","imageData","_encodeRgbaToPng","_encodeRgbaToBmp","encode","dir","_encodeIcoDir","dirs","imgs","size","offset","entry","dataSize","ent","_encodeIcoDirEntry","count","encoded","alloc","writeUInt16LE","writeUInt8","writeUInt32LE","headerSize","maskSize","bodySize","imgOffset","maskOff","writeInt32LE","cols","rows","end","maskI","row","bits","bitc","col","pos","r","g","b","a"],"mappings":"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","sourcesContent":["import {IImageData} from '../types';\nimport {Icon} from '../icon';\nimport {pngIhdr} from '../util';\n\n/**\n * Icon entry.\n */\nexport interface IIconIcoEntry {\n\n\t/**\n\t * Icon width.\n\t */\n\treadonly width: number;\n\n\t/**\n\t * Icon height.\n\t */\n\treadonly height: number;\n\n\t/**\n\t * Icon data.\n\t */\n\treadonly data: Readonly<Buffer>;\n}\n\n/**\n * IconIco constructor.\n */\nexport class IconIco extends Icon {\n\t/**\n\t * List of icon entries.\n\t */\n\tpublic entries: IIconIcoEntry[] = [];\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Add an icon from PNG data.\n\t *\n\t * @param data PNG data.\n\t * @param png Encode entry as PNG.\n\t * @param raw Use raw PNG data without re-encoding, if using PNG format.\n\t */\n\tpublic addFromPng(\n\t\tdata: Readonly<Buffer>,\n\t\tpng: boolean | null = null,\n\t\traw = false\n\t) {\n\t\tif (raw && png !== false) {\n\t\t\tconst ihdr = pngIhdr(data);\n\t\t\tconst isPng = png || (\n\t\t\t\t!this._sizeRequiresLegacyBitmap(ihdr.width, ihdr.height)\n\t\t\t);\n\t\t\tif (isPng) {\n\t\t\t\tthis.entries.push({\n\t\t\t\t\twidth: ihdr.width,\n\t\t\t\t\theight: ihdr.height,\n\t\t\t\t\tdata: Buffer.concat([data as Buffer], data.length)\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.addFromRgba(this._decodePngToRgba(data), png);\n\t}\n\n\t/**\n\t * Add an icon from RGBA image data.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param png Encode entry as PNG.\n\t */\n\tpublic addFromRgba(\n\t\timageData: Readonly<IImageData>,\n\t\tpng: boolean | null = null\n\t) {\n\t\t// Use PNG if forced or automatic and size large enough.\n\t\tconst isPng = png || (\n\t\t\tpng === null &&\n\t\t\t!this._sizeRequiresLegacyBitmap(imageData.width, imageData.height)\n\t\t);\n\n\t\tthis.entries.push({\n\t\t\twidth: imageData.width,\n\t\t\theight: imageData.height,\n\t\t\tdata: isPng ?\n\t\t\t\tthis._encodeRgbaToPng(imageData) :\n\t\t\t\tthis._encodeRgbaToBmp(imageData)\n\t\t});\n\t}\n\n\t/**\n\t * Encode icon.\n\t *\n\t * @returns Encoded icon.\n\t */\n\tpublic encode() {\n\t\tconst {entries} = this;\n\t\tconst dir = this._encodeIcoDir(entries.length);\n\t\tconst dirs: Buffer[] = [];\n\t\tconst imgs: Buffer[] = [];\n\t\tlet size = dir.length;\n\t\tlet offset = size + (entries.length * 16);\n\t\tfor (const entry of entries) {\n\t\t\tconst {data} = entry;\n\t\t\tconst dataSize = data.length;\n\t\t\tconst ent = this._encodeIcoDirEntry(entry, offset);\n\t\t\tdirs.push(ent);\n\t\t\timgs.push(data as Buffer);\n\t\t\toffset += dataSize;\n\t\t\tsize += dataSize + ent.length;\n\t\t}\n\t\treturn Buffer.concat([dir, ...dirs, ...imgs], size);\n\t}\n\n\t/**\n\t * Encode icon directory header.\n\t *\n\t * @param count Entry count.\n\t * @returns Encoded header.\n\t */\n\tprotected _encodeIcoDir(count: number) {\n\t\t// Structure: ICONDIR.\n\t\tconst encoded = Buffer.alloc(6);\n\t\tencoded.writeUInt16LE(0, 0);\n\t\tencoded.writeUInt16LE(1, 2);\n\t\tencoded.writeUInt16LE(count, 4);\n\t\treturn encoded;\n\t}\n\n\t/**\n\t * Encode icon directory entry.\n\t *\n\t * @param entry Icon entry.\n\t * @param offset File offset.\n\t * @returns Encoded entry.\n\t */\n\tprotected _encodeIcoDirEntry(\n\t\tentry: Readonly<IIconIcoEntry>,\n\t\toffset: number\n\t) {\n\t\t// Structure: ICONDIRENTRY.\n\t\tconst {width, height, data} = entry;\n\t\tconst encoded = Buffer.alloc(16);\n\t\tencoded.writeUInt8(width >= 256 ? 0 : width, 0);\n\t\tencoded.writeUInt8(height >= 256 ? 0 : height, 1);\n\t\tencoded.writeUInt8(0, 2);\n\t\tencoded.writeUInt8(0, 3);\n\t\tencoded.writeUInt16LE(1, 4);\n\t\tencoded.writeUInt16LE(32, 6);\n\t\tencoded.writeUInt32LE(data.length, 8);\n\t\tencoded.writeUInt32LE(offset, 12);\n\t\treturn encoded;\n\t}\n\n\t/**\n\t * Encode RGBA image to BMP data.\n\t *\n\t * @param imageData Image data.\n\t * @returns BMP data.\n\t */\n\tprotected _encodeRgbaToBmp(imageData: Readonly<IImageData>) {\n\t\tconst {width, height, data} = imageData;\n\t\tconst dataSize = data.length;\n\n\t\t// Calculate the piece sizes.\n\t\tconst headerSize = 40;\n\t\tconst maskSize = (\n\t\t\twidth + (width % 32 ? 32 - (width % 32) : 0)\n\t\t) * height / 8;\n\t\tconst bodySize = dataSize + maskSize;\n\n\t\t// Calculate the piece offsets.\n\t\tconst imgOffset = headerSize;\n\t\tconst maskOff = imgOffset + dataSize;\n\t\tconst encoded = Buffer.alloc(headerSize + bodySize);\n\n\t\t// Structure: BITMAPINFOHEADER.\n\t\t// Height is doubled for alpha channel.\n\t\tencoded.writeUInt32LE(40, 0);\n\t\tencoded.writeInt32LE(width, 4);\n\t\tencoded.writeInt32LE(height * 2, 8);\n\t\tencoded.writeUInt16LE(1, 12);\n\t\tencoded.writeUInt16LE(32, 14);\n\t\tencoded.writeUInt32LE(0, 16);\n\t\tencoded.writeUInt32LE(bodySize, 20);\n\t\tencoded.writeInt32LE(3780, 24);\n\t\tencoded.writeInt32LE(3780, 28);\n\t\tencoded.writeUInt32LE(0, 32);\n\t\tencoded.writeUInt32LE(0, 36);\n\n\t\t// Write image and mask, reverse the row order.\n\t\tconst cols = width * 4;\n\t\tconst rows = height * cols;\n\t\tconst end = rows - cols;\n\t\tlet maskI = 0;\n\t\tfor (let row = 0; row < rows; row += cols) {\n\t\t\tlet bits = 0;\n\t\t\tlet bitc = 0;\n\t\t\tfor (let col = 0; col < cols; col += 4) {\n\t\t\t\t// Write RGBA as BGRA.\n\t\t\t\tlet pos = row + col;\n\t\t\t\tconst r = data[pos++];\n\t\t\t\tconst g = data[pos++];\n\t\t\t\tconst b = data[pos++];\n\t\t\t\tconst a = data[pos];\n\t\t\t\tpos = (end - row) + col;\n\t\t\t\tencoded.writeUInt8(b, imgOffset + pos++);\n\t\t\t\tencoded.writeUInt8(g, imgOffset + pos++);\n\t\t\t\tencoded.writeUInt8(r, imgOffset + pos++);\n\t\t\t\tencoded.writeUInt8(a, imgOffset + pos);\n\n\t\t\t\t// Write mask bits after image data.\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tbits = (bits << 1) | (data[pos] === 0 ? 1 : 0);\n\t\t\t\tif (++bitc === 8) {\n\t\t\t\t\tencoded.writeUInt8(bits, maskOff + maskI++);\n\t\t\t\t\tbits = 0;\n\t\t\t\t\tbitc = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Align mask row to 4 bytes.\n\t\t\twhile (maskI % 4) {\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tbits <<= 1;\n\t\t\t\tif (++bitc === 8) {\n\t\t\t\t\tencoded.writeUInt8(bits, maskOff + maskI++);\n\t\t\t\t\tbits = 0;\n\t\t\t\t\tbitc = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn encoded;\n\t}\n\n\t/**\n\t * Check if height requires legacy bitmap for compatiblity.\n\t *\n\t * @param width Image width.\n\t * @param height Image height.\n\t * @returns Returns true if requires legacy bitmap.\n\t */\n\tprotected _sizeRequiresLegacyBitmap(width: number, height: number) {\n\t\treturn width < 64 || height < 64;\n\t}\n}\n"],"file":"ico.js","sourceRoot":"../../src"}