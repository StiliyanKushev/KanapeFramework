/// <reference types="node" />
import { IImageData } from '../types';
import { Icon } from '../icon';
/**
 * Icon entry.
 */
export interface IIconIcnsEntry {
    /**
     * Icon type.
     */
    readonly type: string;
    /**
     * Icon data.
     */
    readonly data: Readonly<Buffer>;
}
/**
 * IconIcns constructor.
 */
export declare class IconIcns extends Icon {
    /**
     * Option to include TOC tag (table of contents) in encode.
     */
    toc: boolean;
    /**
     * List of icon entries.
     */
    entries: IIconIcnsEntry[];
    /**
     * Types that are ARGB.
     */
    protected _typeArgb: Set<string>;
    /**
     * Types that are PNG.
     */
    protected _typePng: Set<string>;
    /**
     * Types that are icon 24-bit.
     */
    protected _typeIcon24Bit: Set<string>;
    /**
     * Types that are mask 8-bit.
     */
    protected _typeMask8Bit: Set<string>;
    constructor();
    /**
     * Add an icon from PNG data.
     *
     * @param data PNG data.
     * @param types Types to encode as.
     * @param raw Use raw PNG data without re-encoding for the PNG types.
     */
    addFromPng(data: Readonly<Buffer>, types: readonly string[], raw?: boolean): void;
    /**
     * Add an icon from RGBA image data.
     *
     * @param imageData RGBA image data.
     * @param types Types to encode as.
     */
    addFromRgba(imageData: Readonly<IImageData>, types: readonly string[]): void;
    /**
     * Encode icon.
     *
     * @returns Encoded icon.
     */
    encode(): Buffer;
    /**
     * Add an icon from RGBA image data, individual type.
     *
     * @param imageData RGBA image data.
     * @param type Type to encode as.
     */
    protected _addFromRgbaType(imageData: Readonly<IImageData>, type: string): void;
    /**
     * Encode RGBA image data to ARGB.
     *
     * @param imageData RGBA image data.
     * @param _type Icon type.
     * @returns Encoded data.
     */
    protected _encodeRgbaToTypeArgb(imageData: Readonly<IImageData>, _type: string): Buffer;
    /**
     * Encode RGBA image data to PNG.
     *
     * @param imageData RGBA image data.
     * @param _type Icon type.
     * @returns Encoded data.
     */
    protected _encodeRgbaToTypePng(imageData: Readonly<IImageData>, _type: string): Buffer;
    /**
     * Encode RGBA image data to icon 24-bit.
     *
     * @param imageData RGBA image data.
     * @param type Icon type.
     * @returns Encoded data.
     */
    protected _encodeRgbaToTypeIcon24Bit(imageData: Readonly<IImageData>, type: string): Buffer;
    /**
     * Encode RGBA image data to mask 8-bit.
     *
     * @param imageData RGBA image data.
     * @param _type Icon type.
     * @returns Encoded data.
     */
    protected _encodeRgbaToTypeMask8Bit(imageData: Readonly<IImageData>, _type: string): Buffer;
    /**
     * Encode RGBA image data to packbits.
     *
     * @param imageData RGBA image data.
     * @param alpha Incldue the alpha channel.
     * @param header Header to prepend to the output.
     * @returns Encoded data.
     */
    protected _encodeRgbaToPackBits(imageData: Readonly<IImageData>, alpha: boolean, header?: Readonly<Buffer> | null): Buffer;
    /**
     * Encode channel from RGBA image data.
     *
     * @param imageData RGBA image data.
     * @param index Channel index (R=0, B=1, G=2, A=3).
     * @returns Encoded data.
     */
    protected _encodeRgbaChannel(imageData: Readonly<IImageData>, index: 0 | 1 | 2 | 3): Buffer;
    /**
     * Encode data using PackBits ICNS compression.
     *
     * @param data Data to be compressed.
     * @returns Compressed data.
     */
    protected _encodePackBitsIcns(data: Readonly<Buffer>): Buffer;
}
