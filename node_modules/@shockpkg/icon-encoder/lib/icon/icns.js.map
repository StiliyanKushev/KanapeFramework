{"version":3,"sources":["icon/icns.ts"],"names":["packbitsEncode","packbits","encode","default","typeArgb","typePng","typeIcon24Bit","typeMask8Bit","IconIcns","Icon","constructor","Set","addFromPng","data","types","raw","addFromRgba","_decodePngToRgba","rgba","type","_typePng","has","entries","push","Buffer","concat","length","imageData","_addFromRgbaType","toc","head","alloc","write","size","tocSize","tocHead","from","tocs","images","tagType","tagSize","tagSizeValue","writeUInt32BE","_typeArgb","_encodeRgbaToTypeArgb","_encodeRgbaToTypePng","_typeIcon24Bit","_encodeRgbaToTypeIcon24Bit","_typeMask8Bit","_encodeRgbaToTypeMask8Bit","Error","_type","_encodeRgbaToPackBits","_encodeRgbaToPng","_encodeRgbaChannel","alpha","header","pieces","_encodePackBitsIcns","index","encoded","i","j","writeUInt8","format"],"mappings":"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","sourcesContent":["import * as packbits from '@fiahfy/packbits';\n\nimport {IImageData} from '../types';\nimport {Icon} from '../icon';\n\n// For compatability for CommonJS and ESM.\nconst packbitsEncode = packbits.encode || (packbits as any).default.encode;\n\nconst typeArgb = [\n\t'ic04',\n\t'ic05'\n];\n\nconst typePng = [\n\t'icp4',\n\t'icp5',\n\t'icp6',\n\t'ic07',\n\t'ic08',\n\t'ic09',\n\t'ic10',\n\t'ic11',\n\t'ic12',\n\t'ic13',\n\t'ic14'\n];\n\nconst typeIcon24Bit = [\n\t'is32',\n\t'il32',\n\t'ih32',\n\t'it32'\n];\n\nconst typeMask8Bit = [\n\t's8mk',\n\t'l8mk',\n\t'h8mk',\n\t't8mk'\n];\n\n/**\n * Icon entry.\n */\nexport interface IIconIcnsEntry {\n\n\t/**\n\t * Icon type.\n\t */\n\treadonly type: string;\n\n\t/**\n\t * Icon data.\n\t */\n\treadonly data: Readonly<Buffer>;\n}\n\n/**\n * IconIcns constructor.\n */\nexport class IconIcns extends Icon {\n\t/**\n\t * Option to include TOC tag (table of contents) in encode.\n\t */\n\tpublic toc = false;\n\n\t/**\n\t * List of icon entries.\n\t */\n\tpublic entries: IIconIcnsEntry[] = [];\n\n\t/**\n\t * Types that are ARGB.\n\t */\n\tprotected _typeArgb = new Set(typeArgb);\n\n\t/**\n\t * Types that are PNG.\n\t */\n\tprotected _typePng = new Set(typePng);\n\n\t/**\n\t * Types that are icon 24-bit.\n\t */\n\tprotected _typeIcon24Bit = new Set(typeIcon24Bit);\n\n\t/**\n\t * Types that are mask 8-bit.\n\t */\n\tprotected _typeMask8Bit = new Set(typeMask8Bit);\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Add an icon from PNG data.\n\t *\n\t * @param data PNG data.\n\t * @param types Types to encode as.\n\t * @param raw Use raw PNG data without re-encoding for the PNG types.\n\t */\n\tpublic addFromPng(\n\t\tdata: Readonly<Buffer>,\n\t\ttypes: readonly string[],\n\t\traw = false\n\t) {\n\t\tif (!raw) {\n\t\t\tthis.addFromRgba(this._decodePngToRgba(data), types);\n\t\t\treturn;\n\t\t}\n\t\tlet rgba: IImageData | null = null;\n\t\tfor (const type of types) {\n\t\t\tif (this._typePng.has(type)) {\n\t\t\t\tthis.entries.push({\n\t\t\t\t\ttype,\n\t\t\t\t\tdata: Buffer.concat([data as Buffer], data.length)\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\trgba ||= this._decodePngToRgba(data);\n\t\t\tthis.addFromRgba(rgba, [type]);\n\t\t}\n\t}\n\n\t/**\n\t * Add an icon from RGBA image data.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param types Types to encode as.\n\t */\n\tpublic addFromRgba(\n\t\timageData: Readonly<IImageData>,\n\t\ttypes: readonly string[]\n\t) {\n\t\tfor (const type of types) {\n\t\t\tthis._addFromRgbaType(imageData, type);\n\t\t}\n\t}\n\n\t/**\n\t * Encode icon.\n\t *\n\t * @returns Encoded icon.\n\t */\n\tpublic encode() {\n\t\tconst {toc} = this;\n\t\tconst head = Buffer.alloc(8);\n\t\thead.write('icns', 0);\n\t\tlet size = 8;\n\t\tlet tocSize = 8;\n\t\tconst tocHead = toc ? Buffer.from('TOC ----') : null;\n\t\tconst tocs = tocHead ? [tocHead] : [];\n\t\tconst images = [];\n\t\tfor (const {type, data} of this.entries) {\n\t\t\tconst tagType = Buffer.alloc(4);\n\t\t\ttagType.write(type, 0);\n\t\t\tconst tagSize = Buffer.alloc(4);\n\t\t\tconst tagSizeValue = data.length + 8;\n\t\t\ttagSize.writeUInt32BE(tagSizeValue, 0);\n\t\t\tif (toc) {\n\t\t\t\ttocs.push(tagType, tagSize);\n\t\t\t\ttocSize += 8;\n\t\t\t\tsize += 8;\n\t\t\t}\n\t\t\timages.push(tagType, tagSize, data);\n\t\t\tsize += tagSizeValue;\n\t\t}\n\t\tif (tocHead) {\n\t\t\ttocHead.writeUInt32BE(tocSize, 4);\n\t\t\tsize += 8;\n\t\t}\n\t\thead.writeUInt32BE(size, 4);\n\t\treturn Buffer.concat([head, ...tocs, ...images], size);\n\t}\n\n\t/**\n\t * Add an icon from RGBA image data, individual type.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param type Type to encode as.\n\t */\n\tprotected _addFromRgbaType(imageData: Readonly<IImageData>, type: string) {\n\t\tif (this._typeArgb.has(type)) {\n\t\t\tthis.entries.push({\n\t\t\t\ttype,\n\t\t\t\tdata: this._encodeRgbaToTypeArgb(imageData, type)\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this._typePng.has(type)) {\n\t\t\tthis.entries.push({\n\t\t\t\ttype,\n\t\t\t\tdata: this._encodeRgbaToTypePng(imageData, type)\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this._typeIcon24Bit.has(type)) {\n\t\t\tthis.entries.push({\n\t\t\t\ttype,\n\t\t\t\tdata: this._encodeRgbaToTypeIcon24Bit(imageData, type)\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (this._typeMask8Bit.has(type)) {\n\t\t\tthis.entries.push({\n\t\t\t\ttype,\n\t\t\t\tdata: this._encodeRgbaToTypeMask8Bit(imageData, type)\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthrow new Error(`Unknown type: ${type}`);\n\t}\n\n\t/**\n\t * Encode RGBA image data to ARGB.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param _type Icon type.\n\t * @returns Encoded data.\n\t */\n\tprotected _encodeRgbaToTypeArgb(\n\t\timageData: Readonly<IImageData>,\n\t\t_type: string\n\t) {\n\t\t// The compressed data always has an ARGB header.\n\t\treturn this._encodeRgbaToPackBits(\n\t\t\timageData,\n\t\t\ttrue,\n\t\t\tBuffer.from('ARGB', 'ascii')\n\t\t);\n\t}\n\n\t/**\n\t * Encode RGBA image data to PNG.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param _type Icon type.\n\t * @returns Encoded data.\n\t */\n\tprotected _encodeRgbaToTypePng(\n\t\timageData: Readonly<IImageData>,\n\t\t_type: string\n\t) {\n\t\treturn this._encodeRgbaToPng(imageData);\n\t}\n\n\t/**\n\t * Encode RGBA image data to icon 24-bit.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param type Icon type.\n\t * @returns Encoded data.\n\t */\n\tprotected _encodeRgbaToTypeIcon24Bit(\n\t\timageData: Readonly<IImageData>,\n\t\ttype: string\n\t) {\n\t\t// The 'it32' type has 4 null byte header.\n\t\treturn this._encodeRgbaToPackBits(\n\t\t\timageData,\n\t\t\tfalse,\n\t\t\ttype === 'it32' ? Buffer.alloc(4) : null\n\t\t);\n\t}\n\n\t/**\n\t * Encode RGBA image data to mask 8-bit.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param _type Icon type.\n\t * @returns Encoded data.\n\t */\n\tprotected _encodeRgbaToTypeMask8Bit(\n\t\timageData: Readonly<IImageData>,\n\t\t_type: string\n\t) {\n\t\treturn this._encodeRgbaChannel(imageData, 3);\n\t}\n\n\t/**\n\t * Encode RGBA image data to packbits.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param alpha Incldue the alpha channel.\n\t * @param header Header to prepend to the output.\n\t * @returns Encoded data.\n\t */\n\tprotected _encodeRgbaToPackBits(\n\t\timageData: Readonly<IImageData>,\n\t\talpha: boolean,\n\t\theader: Readonly<Buffer> | null = null\n\t) {\n\t\tconst pieces = header ? [header] : [];\n\t\tif (alpha) {\n\t\t\t// A:\n\t\t\tpieces.push(this._encodePackBitsIcns(\n\t\t\t\tthis._encodeRgbaChannel(imageData, 3)\n\t\t\t));\n\t\t}\n\t\t// RGB:\n\t\tpieces.push(\n\t\t\tthis._encodePackBitsIcns(\n\t\t\t\tthis._encodeRgbaChannel(imageData, 0)\n\t\t\t),\n\t\t\tthis._encodePackBitsIcns(\n\t\t\t\tthis._encodeRgbaChannel(imageData, 1)\n\t\t\t),\n\t\t\tthis._encodePackBitsIcns(\n\t\t\t\tthis._encodeRgbaChannel(imageData, 2)\n\t\t\t)\n\t\t);\n\t\treturn Buffer.concat(pieces as Buffer[]);\n\t}\n\n\t/**\n\t * Encode channel from RGBA image data.\n\t *\n\t * @param imageData RGBA image data.\n\t * @param index Channel index (R=0, B=1, G=2, A=3).\n\t * @returns Encoded data.\n\t */\n\tprotected _encodeRgbaChannel(\n\t\timageData: Readonly<IImageData>,\n\t\tindex: 0 | 1 | 2 | 3\n\t) {\n\t\tconst {data} = imageData;\n\t\tconst size = data.length;\n\t\tconst encoded = Buffer.alloc(size / 4);\n\t\tfor (let i = index, j = 0; i < size; i += 4) {\n\t\t\tencoded.writeUInt8(data[i], j++);\n\t\t}\n\t\treturn encoded;\n\t}\n\n\t/**\n\t * Encode data using PackBits ICNS compression.\n\t *\n\t * @param data Data to be compressed.\n\t * @returns Compressed data.\n\t */\n\tprotected _encodePackBitsIcns(data: Readonly<Buffer>) {\n\t\treturn packbitsEncode(data as Buffer, {\n\t\t\tformat: 'icns'\n\t\t});\n\t}\n}\n"],"file":"icns.js","sourceRoot":"../../src"}